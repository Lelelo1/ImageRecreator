check if argb is a range - so that + 1 tunes the color Yes

---

lowimage has double amount of -1 (white) than original.

---

model trained with white and with a faulty if float comparison made resulted in myimgq0rwhitewhite.jpg

---

... myimgq0rwithoutwhite.jpg

---

When not using average the horizontal lines appeared. They where also present when using wrong float comparison in train

One strategy is to include as much info as possible in Data and run automl

--
0.0001f, parts 5, 10 original images:

not much difference. no horizontal lines.

--

auto ml:
	[ColumnName("Average")]
        public float average;
        [ColumnName("AmountWhite")] //<-- never added into the trainer though
        public float amountWhite;
        [ColumnName("X")]
        public float x;
        [ColumnName("Y")]
        public float y;
        [ColumnName("Value")]
        public float value;
        [ColumnName("Label")]
        public float original;

10 images, 10 parts and 0.0001f percent 70min:

BestRun:
LossFunction = 82500759481.01474
MeanAbsoluteError = 177187.98968335858
MeanSquaredError = 82500759693.8049
RSquared = 0.99581643758822758
RootMeanSquaredError = 287229.454781025

RuntimeInSeconds = 41.6010725
TrainerName = "FastTreeRegression"

got myimgq0rlongfastreeregression

automl never said anything of which colmns could be dropped

FastTReeRegression introduces squares. Probabbly no good.

---

Need faster recreation. Try use byte array instead.

Try train with randomized images instead.

in the byte array the A (transparency) should be last rgba: https://en.wikipedia.org/wiki/RGBA_color_space
while in C# color from  A is first: ARGB


---

120 / 630 with one pixel. = 0.190476

346 / 822 with 100 pixel. = 0,420924

A feature should probably be size of the image. No. size per pixel.